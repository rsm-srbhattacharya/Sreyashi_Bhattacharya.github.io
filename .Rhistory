mutate(shr = n / sum(n))
product_shares
out1 <- mlogit(choice ~ apple + samsung | 0, data = mdat1)
library(mlogit)
install.packages('mlogit')
library(mlogit)
mdat1 <- mlogit.data(sub1, choice = "choice", shape = "long", chid.var = "customer_id")
# Let's split the big (n*6 row) dataframe into 3 dataframes, one for each year.
sub1 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 1))
# replace missing 'discount' values (currently NA) with empty string ("")
cust_dat <- cust_dat |> mutate(discount = ifelse(is.na(discount), "", discount))
set.seed(1357)
subk <- cust_dat |> select(gaming, chat, maps, video, social, reading)
outk <- kmeans(subk, centers = 3, nstart = 10)
getwd()
setwd("/mnt/c/Users/sreya/OneDrive/Desktop/USA/Job search and TA/")
getwd()
setwd("/mnt/c/Users/sreya/OneDrive/Desktop/USA/TA- MGT 100")
getwd()
cust_dat <- read_csv("data/smartphone_customer_data.csv")
cust_dat <- read_csv("smartphone_customer_data.csv")
load("data/mnl_datasets.RData")
load("mnl_datasets.RData")
load("mnl_performance_functions.RData")
# brand/product shares
brand_shares1 <- cust_dat %>% filter(years_ago == 1) %>% count(brand) %>% mutate(n1=n, shr1 = n / sum(n)) %>% select(-n)
brand_shares1
# brand/product shares
brand_shares1 <- cust_dat %>% filter(years_ago == 1) %>% count(brand) %>% mutate(n1=n, shr1 = n / sum(n)) %>% select(-n)
brand_shares2 <- cust_dat %>% filter(years_ago == 2) %>% count(brand) %>% mutate(n3=n, shr3 = n / sum(n)) %>% select(-n)
# brand/product shares
brand_shares1 <- cust_dat %>% filter(years_ago == 1) %>% count(brand) %>% mutate(n1=n, shr1 = n / sum(n)) %>% select(-n)
brand_shares2 <- cust_dat %>% filter(years_ago == 2) %>% count(brand) %>% mutate(n2=n, shr2 = n / sum(n)) %>% select(-n)
brand_shares1
brand_shares2
brand_shares <- merge(brand_shares1, brand_shares2, by="brand")
brand_shares %>% mutate(delta_share = shr1 - sh23)
brand_shares %>% mutate(delta_share = shr1 - sh2)
brand_shares %>% mutate(delta_share = shr1 - shr2)
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
View(mdat1)
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
View(mdat1)
choice ~ apple + samsung
mlogit(choice ~ apple + samsung | 0, data=mdat1)
# Convert the data to mlogit.data format
mdat1 <- mlogit.data(your_dataframe, choice = "choice", shape = "wide", varying = c("apple", "samsung", "huawei"), id.var = "customer_id", alt.var = "phone_id")
# Convert the data to mlogit.data format
mdat1 <- mlogit.data(mdat1, choice = "choice", shape = "wide", varying = c("apple", "samsung", "huawei"), id.var = "customer_id", alt.var = "phone_id")
# Convert the data to mlogit.data format
mdat1 <- mlogit.data(cust_dat, choice = "choice", shape = "wide", varying = c("apple", "samsung", "huawei"), id.var = "customer_id", alt.var = "phone_id")
sub1 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 1))
load("mnl_datasets(1).RData")
load("mnl_datasets (1).RData")
load("mnl_performance_functions.RData")
# brand/product shares
brand_shares1 <- cust_dat %>% filter(years_ago == 1) %>% count(brand) %>% mutate(n1=n, shr1 = n / sum(n)) %>% select(-n)
brand_shares2 <- cust_dat %>% filter(years_ago == 2) %>% count(brand) %>% mutate(n2=n, shr2 = n / sum(n)) %>% select(-n)
brand_shares1
brand_shares2
brand_shares <- merge(brand_shares1, brand_shares2, by="brand")
brand_shares %>% mutate(delta_share = shr1 - shr2)
# ANS Huawei
library(mlogit)
sub1 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 1))
sub2 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 2))
sub3 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 3))
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
rlang::last_trace()
## Week 5
# Today we fit a "workhorse" model in marketing and economics, the multinomial
# logit (MNL) model. We begin with the case of a homogeneous MNL model.
# install.packages("mlogit")
library(tidyverse)
library(mlogit)
# import datasets -----
# In order to fit our Multinomial Logit (MNL) model, we need to know
# (1) what the customer chose and (2) the set of options from which the
# customer made his or her choice.  That's because MNL estimates demand by comparing
# chosen options to unchosen options. We'll need to wrangle data to
# facilitate those comparisons
# import customer data
cust_dat <- read_csv("../data/smartphone_customer_data.csv", show_col_types = F)
#cust_dat <- read_csv("smartphone_customer_data.csv", show_col_types = F)
n <- nrow(cust_dat)
# replace missing 'discount' values (currently NA) with empty string ("")
cust_dat <- cust_dat |> mutate(discount = ifelse(is.na(discount), "", discount))
set.seed(1357)
subk <- cust_dat |> select(gaming, chat, maps, video, social, reading)
outk <- kmeans(subk, centers = 3, nstart = 10)
table(outk$cluster)
cust_dat$segment <- factor(outk$cluster)
rm(subk, outk)
phone_dat <- read_csv("../data/phone_dat.csv", show_col_types = F)
phone_dat <- read_csv("phone_dat.csv", show_col_types = F)
phone_dat <- read_csv("phone_dat.csv", show_col_types = F)
# create an empty list to store the n datasets (each dataset will have 6 rows)
dat_list <- vector(mode = "list", length = n)
# initialize progress bar
# this loop may be a little slow, so let's have a progress bar show us
# how fast the code is running and how long until the loop finishes
pb <- txtProgressBar(min = 1, max = n, style = 3)
# loop for step 1
for (i in 1:n) {
# get cohort, minutes, brand, and size for customer i
i_cohort   <- cust_dat |> slice(i) |> pull(years_ago)
i_brand    <- cust_dat |> slice(i) |> pull(brand)
i_size     <- cust_dat |> slice(i) |> pull(screen_size)
i_discount <- cust_dat |> slice(i) |> pull(discount)
i_segment  <- cust_dat |> slice(i) |> pull(segment)
i_minutes  <- cust_dat |> slice(i) |> pull(total_minutes)
# subset the phone data to the 6 phones for the year when the customer purchased
PD <- phone_dat |> filter(years_ago == i_cohort)
# adjust one of the phone's price for the 10% discount, if applicable
PD <- PD |> mutate(price = price - (phone_id == i_discount) * price * 0.1)
# add customer id to PD
PD <- PD |> mutate(customer_id = i)
# convert the one brand variable into a set of 3 brand dummies (ie, binary variables)
PD <- PD |> mutate(
apple = as.integer(brand == "apple"),
huawei = as.integer(brand == "huawei"),
samsung = as.integer(brand == "samsung")
)
# create a binary variable to indicate the chosen phone
# this is going to be the dependent variable in the MNL model (like "y" in OLS)
PD <- PD |>
mutate(choice = (brand == i_brand) & (screen_size == i_size)) |>
mutate(choice = as.integer(choice))
# add segment and total_minutes
PD <- PD |> mutate(segment = i_segment, total_minutes = i_minutes)
# store this 6-row dataset in the i'th position of that list we initialized before the loop
dat_list[[i]] <- PD |> select(
customer_id, phone_id, choice,
apple, huawei, samsung,
price, screen_size,
segment, total_minutes
)
# update the progress bar to show progress
setTxtProgressBar(pb, i)
}
# clean up -- delete temporary objects from the loop that we don't need anymore
rm(i, i_cohort, i_brand, i_size, i_discount, i_segment, i_minutes, PD, pb)
# Let's take a look at two (out of the n) 6-row datasets:
dat_list[1]
dat_list[100]
# rbind operates on dataframes to concatenate rows
# we use do.call in order to concatenate rows within lists
mnl_dat <- as_tibble(do.call(rbind, dat_list))
rm(dat_list)
# Let's see how this n*6 row dataframe looks
head(mnl_dat, n = 20)
# Let's split the big (n*6 row) dataframe into 3 dataframes, one for each year.
sub1 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 1))
sub2 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 2))
sub3 <- mnl_dat |> filter(customer_id %in% which(cust_dat$years_ago == 3))
mdat1 <- mlogit.data(sub1, choice = "choice", shape = "long", chid.var = "customer_id")
mdat2 <- mlogit.data(sub2, choice = "choice", shape = "long", chid.var = "customer_id")
mdat3 <- mlogit.data(sub3, choice = "choice", shape = "long", chid.var = "customer_id")
save(sub1, sub2, sub3, mdat1, mdat2, mdat3, file = "../data/mnl_datasets.RData")
save(sub1, sub2, sub3, mdat1, mdat2, mdat3, file = "mnl_datasets.RData")
brand_shares <- cust_dat |>
filter(years_ago == 1) |>
count(brand) |>
mutate(shr = n / sum(n))
brand_shares
product_shares <- cust_dat |>
filter(years_ago == 1) |>
count(phone_id) |>
mutate(shr = n / sum(n))
product_shares
out1 <- mlogit(choice ~ apple + samsung | 0, data = mdat1)
rlang::last_trace()
library("dfidx")
mdat1 <- dfidx(sub1, choice = "choice", shape = "long", chid.var = "customer_id")
mdat2 <- dfidx(sub2, choice = "choice", shape = "long", chid.var = "customer_id")
mdat3 <- dfidx(sub3, choice = "choice", shape = "long", chid.var = "customer_id")
save(sub1, sub2, sub3, mdat1, mdat2, mdat3, file = "mnl_datasets.RData")
brand_shares <- cust_dat |>
filter(years_ago == 1) |>
count(brand) |>
mutate(shr = n / sum(n))
brand_shares
product_shares <- cust_dat |>
filter(years_ago == 1) |>
count(phone_id) |>
mutate(shr = n / sum(n))
product_shares
out1 <- mlogit(choice ~ apple + samsung | 0, data = mdat1)
out1
summary(out1)
library(tidyverse)
library(mlogit)
cust_dat <- read_csv("smartphone_customer_data.csv")
load("mnl_datasets (1).RData")
load("mnl_performance_functions.RData")
# brand/product shares
brand_shares1 <- cust_dat %>% filter(years_ago == 1) %>% count(brand) %>% mutate(n1=n, shr1 = n / sum(n)) %>% select(-n)
brand_shares2 <- cust_dat %>% filter(years_ago == 2) %>% count(brand) %>% mutate(n2=n, shr2 = n / sum(n)) %>% select(-n)
brand_shares1
brand_shares2
brand_shares <- merge(brand_shares1, brand_shares2, by="brand")
brand_shares %>% mutate(delta_share = shr1 - shr2)
# ANS Huawei
library(mlogit)
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
mdat1 <- dfidx(sub1, choice = "choice", shape = "long", chid.var = "customer_id")
mdat2 <- dfidx(sub2, choice = "choice", shape = "long", chid.var = "customer_id")
mdat3 <- dfidx(sub3, choice = "choice", shape = "long", chid.var = "customer_id")
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
summary(out1)
# brand-intercept-only model
out1 <- mlogit(choice ~ apple + samsung | 0, data=mdat1)
summary(out1)
out2 <- mlogit(choice ~ apple + samsung | 0, data=mdat2)
summary(out2)
out3 <- mlogit(choice ~ apple + samsung | 0, data=mdat3)
summary(out3)
summary(out1)
# print the coefficients
coef(out1)
# print the brand market shares estimated from the model
coefs1 <- c(huawei = 0, coef(out1))
shares1 <- exp(coefs1) / sum(exp(coefs1)) # <-- formula from bottom of slide 14
round(shares1, 3)
# print the actual brand market shares
brand_shares
# brand-intercept-only model
out2 <- mlogit(choice ~ apple + samsung | 0, data=mdat2)
# brand-intercept-only model
out2 <- mlogit(choice ~ apple + samsung | 0, data=mdat2)
summary(out2)
# print the coefficients
coef(out2)
# print the brand market shares estimated from the model
coefs2 <- c(huawei = 0, coef(out2))
shares1 <- exp(coefs2) / sum(exp(coefs2)) # <-- formula from bottom of slide 14
shares2 <- exp(coefs2) / sum(exp(coefs2)) # <-- formula from bottom of slide 14
round(shares2, 3)
# print the actual brand market shares
brand_shares
# brand-intercept-only model
out2 <- mlogit(choice ~ apple + samsung | 0, data=mdat2)
summary(out2)
# print the coefficients
coef(out2)
# print the brand market shares estimated from the model
coefs2 <- c(huawei = 0, coef(out2))
shares2 <- exp(coefs2) / sum(exp(coefs2)) # <-- formula from bottom of slide 14
round(shares2, 3)
# print the actual brand market shares
brand_shares
Again, for cohort 2,
#Again, for cohort 2,
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
summary(out)
#Again, for cohort 2,
out <- mlogit(choice ~ size_cat + price | 0, data = mdat2)
mdat2
#Again, for cohort 2,
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
#Again, for cohort 2,
out <- mlogit(choice ~ screen_size + price | 0, data = mdat2)
summary(out)
#Again, for cohort 2,
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
summary(out)
#Again, for cohort 2,
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
summary(out)
out4 <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
summary(out4)
shares4p <- colMeans(predict(out4, newdata = mdat1))
names(shares4p) <- sub1 |> head(6) |> pull(phone_id)
shares4b <- colSums(matrix(shares4p, nrow = 2))
names(shares4b) <- c("apple", "samsung", "huawei")
round(shares4b, 3)
brand_shares
round(shares4p, 3)
product_shares
shares4p <- colMeans(predict(out4, newdata = mdat2))
names(shares4p) <- sub1 |> head(6) |> pull(phone_id)
round(shares4p, 3)
product_shares
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
mdat1 <- dfidx(sub1, choice = "choice", shape = "long", chid.var = "customer_id")
mdat2 <- dfidx(sub2, choice = "choice", shape = "long", chid.var = "customer_id")
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
summary(out)
shares4p <- colMeans(predict(out, newdata = mdat2))
names(shares4p) <- sub1 |> head(6) |> pull(phone_id)
round(shares4p, 3)
product_shares
shares4p
summary(out)
shares4p <- colMeans(predict(out, newdata = mdat2))
names(shares4p) <- sub1 |> head(6) |> pull(phone_id)
round(shares4p, 3)
product_shares <- cust_dat |>
filter(years_ago == 2) |>
count(phone_id) |>
mutate(shr = n / sum(n))
product_shares
round(shares4p, 3)
summary(out)
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
summary(out)
brand_hit_rate(mdat2, out)
product_hit_rate(mdat2, out)
ll_ratio(mdat2, out)
summary(out)
brand_hit_rate(mdat2, out)
product_hit_rate(mdat2, out)
ll_ratio(mdat2, out)
brand_hit_rate(mdat2, out)
out_new1 <- mlogit(choice ~ apple:segment + samsung:segment + price:segment + screen_size:segment + price:I(total_minutes/1000) | 0, data=mdat1)
out_new2 <- mlogit(choice ~ apple:segment + samsung:segment + price:segment + screen_size:segment + price:I(total_minutes/1000) | 0, data=mdat2)
out_new3<- mlogit(choice ~ apple:segment + samsung:segment + price:segment + screen_size:segment + price:I(total_minutes/1000) | 0, data=mdat3)
summary(out_new1)
summary(out_new2)
summary(out_new3)
stargazer::stargazer(out3, out2, out1, type="text")
library('stargazer')
install.packages('stargazer')
library('stargazer')
stargazer::stargazer(out3, out2, out1, type="text")
myplot(mdat1, out4, "A1")
myplot <- function(data, model, phone) {
disc_levs <- c("A1", "A2", "S1", "S2", "H1", "H2", "")
preds <- as_tibble(predict(model, newdata=data))
colnames(preds) <- disc_levs[1:6]
temp <- cust_dat |>
filter(years_ago == 1) |>
mutate(discount = factor(discount, levels = disc_levs)) |>
mutate(discount = fct_recode(discount, "None"="")) |>
mutate(pr = preds[[phone]]) |>
select(discount, pr)
p <- temp |> filter(discount != "None") |>
ggplot(aes(x=pr)) +
geom_histogram(aes(fill=discount), binwidth = 0.01) +
facet_wrap(. ~ discount) +
xlab(paste("Probability a customer chooses phone", phone)) +
ylab("Count of customers") +
ggtitle(paste0("Pr(choose ",phone,") by customer")) +
labs(fill = "Discounted Phone") +
theme_bw()
print(p)
return(invisible(NULL))
}
myplot(mdat1, out4, "A1")
myplot(mdat1, out4, "H1")
library(tidyverse)
library(mlogit)
# import customer data
cust_dat <- read_csv("../data/smartphone_customer_data.csv", show_col_types=F)
n <- nrow(cust_dat)                                      #
# import phone attributes
phone_dat <- read_csv("../data/phone_dat.csv", show_col_types=F)
# import datasets formatted for mlogit estimation
load("../data/mnl_datasets.RData")
# import hit rate and likelihood ratio index functions
load("../data/mnl_performance_functions.RData")
myplot <- function(data, model, phone) {
disc_levs <- c("A1", "A2", "S1", "S2", "H1", "H2", "")
preds <- as_tibble(predict(model, newdata=data))
colnames(preds) <- disc_levs[1:6]
temp <- cust_dat |>
filter(years_ago == 1) |>
mutate(discount = factor(discount, levels = disc_levs)) |>
mutate(discount = fct_recode(discount, "None"="")) |>
mutate(pr = preds[[phone]]) |>
select(discount, pr)
p <- temp |> filter(discount != "None") |>
ggplot(aes(x=pr)) +
geom_histogram(aes(fill=discount), binwidth = 0.01) +
facet_wrap(. ~ discount) +
xlab(paste("Probability a customer chooses phone", phone)) +
ylab("Count of customers") +
ggtitle(paste0("Pr(choose ",phone,") by customer")) +
labs(fill = "Discounted Phone") +
theme_bw()
print(p)
return(invisible(NULL))
}
brand_shares <- cust_dat  |>
filter(years_ago == 1) |>
count(brand) |>
mutate(shr = n / sum(n))
brand_shares
brand_shares <- cust_dat  |>
filter(years_ago == 2) |>
count(brand) |>
mutate(shr = n / sum(n))
brand_shares
product_shares <- cust_dat |>
filter(years_ago == 2) |>
count(phone_id) |>
mutate(shr = n / sum(n))
product_shares
out4 <- mlogit(choice ~ phone_id + price | 0, data=mdat1)
out4 <- mlogit(choice ~ phone_id + price | 0, data=mdat2)
summary(out4)
brand_hit_rate(mdat2, out4)
product_hit_rate(mdat2, out4)
ll_ratio(mdat2, out4)
# plot each individual's probability of choosing phone A1
myplot(mdat1, out4, "A1")
out_f <- mlogit(choice ~ apple:segment + samsung:segment +
price:segment + screen_size:segment +
price:total_minutes:segment | 0, data=mdat2)
summary(out9)
summary(out_f)
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat1, out_f, "A1")
myplot(mdat1, out_f, "S2")
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat1, out9, "A1")
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat1, out_f, "A1")
summary(out_f)
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat1, out_f, "A2")
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat2, out_f, "A2")
out_f <- mlogit(choice ~ apple:segment + samsung:segment +
price:segment + screen_size:segment +
price:total_minutes:segment | 0, data=mdat2)
summary(out_f)
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat2, out_f, "A2")
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat2, out_f, "A1")
out_f <- mlogit(choice ~ apple:segment + samsung:segment +
price:segment + screen_size:segment +
price:total_minutes:segment | 0, data=mdat2)
summary(out_f)
# plot each individual's probability of choosing phone A1 or S2
myplot(mdat2, out_f, "A1")
out_f <- mlogit(choice ~ apple:segment + samsung:segment +
price:segment + screen_size:segment +
price:total_minutes:segment | 0, data=mdat2)
summary(out_f)
cv_mspe <- function(model, data, k=10, seed=4321) {
# control psuedo random numbers
set.seed(seed)
# randomly assign each customer (J rows) to one of k folds
N <- length(unique(data$customer_id))   # number of customers
J <- length(unique(data$phone_id))      # number of products
fold <- rep((1:N) %% k + 1, each=J)    # rep replicates list elements
# %% is a modulus element, so what we're doing here is computing the remainder when
# dividing 1:N by (k+1). So mod(customer_id,10)+1 is always an integer between 1
# and 10. We repeat that 6 times for each customer, to match the mdat1 observations
# preallocate the prediction storage
preds <- vector(length=nrow(data))
# loop over folds
for(i in 1:k) {
# create row indices for training & prediction observations
row_ids_train <- fold != i     # which rows to keep in for training
row_ids_test  <- !row_ids_train  # which rows to hold out for prediction
# fit/train model on training data
out  <- mlogit(formula(model), data=data[row_ids_train,])
# predict choice probabilities for prediction data
yhat <- predict(model, newdata = data[row_ids_test,])
# store yhat values for prediction data
preds[row_ids_test] <- as.vector(t(yhat))
}
# calculate prediction mse
mspe <- mean((data$choice - preds)^2)
return(mspe)
}
# brand-intercept-only model
out2 <- mlogit(choice ~ apple + samsung | 0, data=mdat2)
out <- mlogit(choice ~ phone_id + price | 0, data = mdat2)
out_f <- mlogit(choice ~ apple:segment + samsung:segment +
price:segment + screen_size:segment +
price:total_minutes:segment | 0, data=mdat2)
# calculate the MSE's for each model
mspe <- vector(length=3)
mspe[1] <- cv_mspe(out, mdat1)
mspe[2] <- cv_mspe(out2, mdat1)
mspe[3] <- cv_mspe(out_f, mdat1)
# plot the MSE's to compare them
tibble(mod_id=1:3, mspe=mspe) |>
ggplot(aes(x=mod_id, y=mspe)) +
geom_point() +
geom_line()
ylim(c(0, .14))
mspe[1] <- cv_mspe(out, mdat2)
mspe[2] <- cv_mspe(out2, mdat2)
mspe[3] <- cv_mspe(out_f, mdat2)
# plot the MSE's to compare them
tibble(mod_id=1:3, mspe=mspe) |>
ggplot(aes(x=mod_id, y=mspe)) +
geom_point() +
geom_line()
ylim(c(0, .14))
mspe[1] <- cv_mspe(out2, mdat2)
mspe[2] <- cv_mspe(out, mdat2)
mspe[3] <- cv_mspe(out_f, mdat2)
# plot the MSE's to compare them
tibble(mod_id=1:3, mspe=mspe) |>
ggplot(aes(x=mod_id, y=mspe)) +
geom_point() +
geom_line()
ylim(c(0, .14))
summary(out_f)
